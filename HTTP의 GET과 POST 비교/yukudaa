- CORS문제를 해결하는 방법과 브라우저에서 CORS가 발생하는 이유

CORS
다른 출처에서 리소스 공유 정책
Origin: Protocol + Host + Post
Origin이 동일하다면 동일 출처로 판단
동일 출처 정책이 필요한 경우
사실 출처가 다른 두 어플리케이션이 자유로이 소통할 수 있는 환경은 꽤 위험한 환경이다. 만일 제약이 없다면, 해커가 CSRF(Cross-Site Request Forgery)나 XSS(Cross-Site Scripting) 등의 방법을 이용해서 우리가 만든 어플리케이션에서 해커가 심어놓은 코드가 실행하여 개인 정보를 가로챌 수 있다

- 쿠키, 캐시, 세션의 개념과 차이점

쿠키: HTTP통신은 stateless 하기 때문에 클라이언트를 확인하기 위해서는 쿠키라는 개념이 필요, 주로 세션관리(서버에서 관리하는 로그인 등의 정보를 의미), 개인 설정유지, 사용자 트래킹(사용자의 행동을 기록하고 분석하는 것) 용도로 사용
세션: 통신을 하기 위해 서로 연결된 순간부터 통신을 마칠때까지의 기간
캐시: 사용자가 웹사이트나 앱에서 서비스를 이용하는 과정에서 이미지, HTML, 파일과 같이 재사용할 수 있는 이전에 사용되었던 데이터들이 보관되는 저장 공간이다. 서버에 재요청할 때 캐시를 이용하면 더 빠르게 이용할 수 있다. 캐시는 컴퓨터의 성능을 향상시키기 위해서 사용되는 고속 기억 장치이며 주기억장치의 일부분
      중앙처리장치(CPU)와 중앙처리장치에 비해서 속도가 느린 주기억장치 사이에서 데이터와 명령어들을 일시적으로 저장하는 메모리를 제공한다. 캐시는 컴퓨터 CPU, 웹, 앱, 서버와 같이 다양한 영역에 사용된다. 캐시를 사용하면 사용자가 웹사이트와 앱에 처음 접속한 이후 다시 접속할 때 더 빠르게 사용할 수 있게 해준다.

- http 상태코드의 예시와 각 상태 코드별 나타날 수 있는 예시 설명

1xx (Informatinal): 요청이 수신되어 처리중
2xx (Successful): 요청 정상 처리
3xx (Redirection): 요청이 완료되려면 추가 행동이 필요
4xx (Client Error): 클라이언트 오류, 잘못된 문법등으로 서버가 요청을 수행할 수 없음
5xx (Server Error): 서버 오류, 서버가 정상 요청을 처리하지 못함

200 OK 요청 성공
201 Created 요청 성공해서 새로운 리소스가 생성됨
301 Moved Permanently 리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음
400 Bad Request 클라이언트가 잘못된 요청을 해서 서버가 요청을 처리할 수 없음
401 Unauthorized 클라이언트가 해당 리소스에 대한 인증이 필요함
404 Not Found 요청 리소스를 찾을 수 없음
500 Internal Server Error 서버 문제로 오류 발생
503 Service Unavailable 서비스 이용 불가
